#
#  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#  SPDX-License-Identifier: Apache-2.0
#

# name: Deploy-and-integration-test-example-app
# on:
#   workflow_call:
#     inputs:
#       environment:
#         required: true
#         type: string
#     secrets:
#       aws-region:
#         required: true
#       role-to-assume:
#         required: true
#       aws-test-hosting-account-id:
#         required: true
#       aws-test-hosting-account-region:
#         required: true
#       slack_webhook_url:
#         required: true

# jobs:
#   deploy-and-integration-test-example:
#     runs-on: ubuntu-20.04
#     environment: ${{ inputs.environment }}
#     permissions:
#       id-token: write
#       contents: read

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Base Action
#         uses: ./.github/actions/baseAction

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-region: ${{ secrets.aws-region }}
#           role-to-assume: ${{ secrets.role-to-assume }}
#           role-session-name: TestOIDCSessionName

#       - name: Deploy example package to Test environment
#         run: |
#           cd workbench-core/example/infrastructure
#           node ../../../common/scripts/install-run-rushx.js cdk:deploy:main
#         env:
#           HOSTING_ACCOUNT_ID: ${{ secrets.aws-test-hosting-account-id }}

#       - name: Deploy example package to Hosting environment
#         run: |
#           cd workbench-core/example/infrastructure
#           node ../../../common/scripts/install-run-rushx.js cdk:deploy:hosting
#         env:
#           HOSTING_ACCOUNT_ID: ${{ secrets.aws-test-hosting-account-id }}
#           HOSTING_ACCOUNT_REGION: ${{ secrets.aws-test-hosting-account-region }}

#       - name: Example package integration test
#         run: |
#           cd workbench-core/example/infrastructure
#           node ../../../common/scripts/install-run-rushx.js integration-tests --verbose

      # - name: Slack Failure Notification
      #   if: failure()
      #   uses: ./.github/actions/notification
      #   with:
      #     slack_webhook_url: ${{ secrets.slack_webhook_url }}

name: Deploy-and-integration-test-example-app
on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
    secrets:
      aws-region:
        required: true
      role-to-assume:
        required: true
      aws-test-hosting-account-id:
        required: true
      aws-test-hosting-account-region:
        required: true
      slack_webhook_url:
        required: true

jobs:
  deploy-example-app:
    runs-on: ubuntu-20.04
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: Cache Rush
        uses: actions/cache@v3
        with:
          path: |
            common/temp/install-run
            ~/.rush
          key: ${{ runner.os }}-rush-${{ hashFiles('rush.json') }}
          restore-keys: |
            ${{ runner.os }}-rush-
            ${{ runner.os }}-

      - name: Cache pnpm
        uses: actions/cache@v3
        with:
          path: |
            common/temp/pnpm-store
            ~/.cache/Cypress
          key: ${{ runner.os }}-pnpm-${{ hashFiles('common/config/rush/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
            ${{ runner.os }}-

      - name: install pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: 7.13.0

      - name: Install dependecies
        run: node common/scripts/install-run-rush.js install

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.aws-region }}
          role-to-assume: ${{ secrets.role-to-assume }}
          role-session-name: TestOIDCSessionName

      - name: Deploy example package to Test environment
        run: |
          cd workbench-core/example/infrastructure
          node ../../../common/scripts/install-run-rushx.js cdk:deploy:main
        env:
          HOSTING_ACCOUNT_ID: ${{ secrets.aws-test-hosting-account-id }}

      - name: Deploy example package to Hosting environment
        run: |
          cd workbench-core/example/infrastructure
          node ../../../common/scripts/install-run-rushx.js cdk:deploy:hosting
        env:
          HOSTING_ACCOUNT_ID: ${{ secrets.aws-test-hosting-account-id }}
          HOSTING_ACCOUNT_REGION: ${{ secrets.aws-test-hosting-account-region }}

      - name: Upload Artifact testEnv.json
        uses: actions/upload-artifact@v3
        with:
          name: testEnv
          path: workbench-core/example/infrastructure/src/config/testEnv.json

      - name: Upload Artifact hostingEnv.json
        uses: actions/upload-artifact@v3
        with:
          name: hostingEnv
          path: workbench-core/example/infrastructure/src/config/hostingEnv.json

      - name: Example package integration test
        run: |
          cd workbench-core/example/infrastructure
          node ../../../common/scripts/install-run-rushx.js jest lib/integration-tests/tests/datasets/list.test.js -i

  #     - name: Set Chunks
  #       id: set-test-chunks
  #       run: |
  #         cd workbench-core/example/infrastructure
  #         echo "::set-output name=test-chunks::$(node ../../../common/scripts/install-run-rushx.js -q jest --listTests --json --findRelatedTests lib/integration-tests/tests/**/*.js | jq -cM '[_nwise(length / 5 | floor)]')"

  #     - name: Set Chunk IDs
  #       id: set-test-chunk-ids
  #       run: echo "::set-output name=test-chunk-ids::$(echo $CHUNKS | jq -cM 'to_entries | map(.key)')"
  #       env:
  #         CHUNKS: ${{ steps['set-test-chunks'].outputs['test-chunks'] }}

  integration-test-example-app:
    name: integration test ${{ matrix.shard }}
    runs-on: ubuntu-20.04
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    needs: [deploy-example-app]
    strategy:
      matrix:
        shard: [1, 2, 3, 4, 5]
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'

      - name: Cache Rush
        uses: actions/cache@v3
        with:
          path: |
            common/temp/install-run
            ~/.rush
          key: ${{ runner.os }}-rush-${{ hashFiles('rush.json') }}
          restore-keys: |
            ${{ runner.os }}-rush-
            ${{ runner.os }}-

      - name: Cache pnpm
        uses: actions/cache@v3
        with:
          path: |
            common/temp/pnpm-store
            ~/.cache/Cypress
          key: ${{ runner.os }}-pnpm-${{ hashFiles('common/config/rush/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
            ${{ runner.os }}-

      - name: install pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: 7.13.0

      - name: Install dependecies
        run: node common/scripts/install-run-rush.js install

      - name: Rush build
        run: node common/scripts/install-run-rush.js build -f @aws/workbench-core-example-infrastructure

      - name: Dowload Artifact testEnv.json
        uses: actions/download-artifact@v3
        with:
          name: testEnv
          path: workbench-core/example/infrastructure/src/config/

      - name: Download Artifact hostingEnv.json
        uses: actions/download-artifact@v3
        with:
          name: hostingEnv
          path: workbench-core/example/infrastructure/src/config/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ secrets.aws-region }}
          role-to-assume: ${{ secrets.role-to-assume }}
          role-session-name: TestOIDCSessionName

      - name: Example package integration test
        run: |
          cd workbench-core/example/infrastructure
          node ../../../common/scripts/install-run-rushx.js jest --shard=${{ matrix.shard }}/${{ strategy.job-total }} --testPathIgnorePatterns lib/integration-tests/tests/datasets/list.test.js

  delete-artifacts:
    if: always()
    runs-on: ubuntu-20.04
    needs: [integration-test-example-app]
    steps:
      - name: Delete Artifacts
        uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            testEnv
            hostingEnv