#
#  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#  SPDX-License-Identifier: Apache-2.0
#

name: Merge-develop-to-stage
on:
  push:
    branches:
      - 'develop'
  
jobs:
  readme-commit:
    uses: awslabs/solution-spark-on-aws/.github/workflows/readme-commit.yml@develop
    secrets:
      gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
      passphrase: ${{ secrets.PASSPHRASE }}
      merge-token: ${{ secrets.MERGE_TOKEN }}
      bot-user: ${{ secrets.BOT_USER }}
      bot-user-email: ${{ secrets.BOT_USER_EMAIL }}
      slack_webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  pre-deployment-check:
    name: Pre deployment check
    runs-on: ubuntu-18.04
    timeout-minutes: 10
    steps:
      - name: "Block Concurrent Deployments"
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-swb-reference:
    needs: [pre-deployment-check]
    uses: awslabs/solution-spark-on-aws/.github/workflows/deploy-integration-swb-reference.yml@develop
    secrets:
      aws-dev-region: ${{ secrets.AWS_DEV_REGION }}
      role-to-assume: ${{ secrets.ASSUME_ROLE }}
      aws-dev-account-region: ${{ secrets.AWS_DEV_ACCOUNT_REGION }}
      slack_webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      CYPRESS_ADMIN_PASSWORD: ${{ secrets.CYPRESS_ADMIN_PASSWORD }}
      CYPRESS_ADMIN_USER: ${{ secrets.CYPRESS_ADMIN_USER }}

  deploy-swb-demo:
    needs: [ deploy-swb-reference]
    uses: awslabs/solution-spark-on-aws/.github/workflows/deploy-swb-reference-demo.yml@develop
    secrets:
      role-to-assume: ${{ secrets.ASSUME_ROLE }}
      slack_webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  # deploy-example:
  #   needs: [pre-deployment-check]
  #   uses: awslabs/solution-spark-on-aws/.github/workflows/deploy-integration-example.yml@develop
  #   secrets:
  #     aws-dev-region: ${{ secrets.AWS_DEV_REGION }}
  #     role-to-assume: ${{ secrets.ASSUME_ROLE }}
  #     aws-dev-account-region: ${{ secrets.AWS_DEV_ACCOUNT_REGION }}
  #     cognito-username: "${{ secrets.COGNITO_USERNAME }}"
  #     cognito-password: "${{ secrets.COGNITO_PASSWORD }}"
  #     cognito-client-id: "${{ secrets.COGNITO_CLIENT_ID }}"

  merge-develop-to-stage:
    name: Merge develop to stage
    runs-on: ubuntu-20.04
    needs: [readme-commit, deploy-swb-reference]
    env: 
      COMMIT_HASH: "${{ needs.readme-commit.outputs.commit_hash }}"
      CHANGES_DETECTED: "${{ needs.readme-commit.outputs.changes_detected }}"
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.MERGE_TOKEN }}
          fetch-depth: 0

      # There's no way for github actions to push to a protected branch. This is a workaround
      # See https://github.community/t/how-to-push-to-protected-branches-in-a-github-action/16101/30
      - name: Temporarily disable branch protection on stage
        uses: octokit/request-action@v2.x
        with:
          route: DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
          owner: awslabs
          repo: solution-spark-on-aws
          branch: stage
        env:
          GITHUB_TOKEN: ${{ secrets.MERGE_TOKEN }}

      - name: Merge to stage
        run: |
          echo "Set the COMMIT_ID to merge to stage, to current workflow commit id, if no readme commit was made"
          echo "Else"
          echo "Set the COMMIT_ID to README commit id"
          COMMIT_ID=''
          if $CHANGES_DETECTED; then
            COMMIT_ID=$COMMIT_HASH
          else
            COMMIT_ID=$GITHUB_SHA
          fi
          git checkout stage
          echo
          echo "  Attempting to merge the 'develop' branch ($COMMIT_ID)"
          echo "  into the 'stage' branch ($(git log -1 --pretty=%H stage))"
          echo
          git merge $COMMIT_ID --ff-only --no-edit
          git push origin stage
          
      - name: Enable branch protection on stage
        uses: octokit/request-action@v2.x
        if: always() # Make sure to enable branch protection even if other steps fail
        with:
          route: POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
          owner: awslabs
          repo: solution-spark-on-aws
          branch: stage
        env:
          GITHUB_TOKEN: ${{ secrets.MERGE_TOKEN }}

      - name: Slack Failure Notification
        if: failure()
        uses: ./.github/actions/notification
        with:
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK }}