variables:
  SECRET_DETECTION_REPORT_FILE: gl-secret-detection-report.json
  CONTAINER_SCAN_REPORT_FILE: "gl-container-scanning-report.json gl-dependency-scanning-report.json"
  SAST_SCAN_REPORT_FILE: "gl-sast-report.json"
  SAST_EXCLUDED_PATHS: "common/scripts/*.js, common/config/rush/pnpm-lock.yaml"
  IMAGE: $CI_REGISTRY_IMAGE/stable:latest

stages:
  - docker-image-update
  - build-and-test
  - update-stable-docker-image
  - security-scan
  - security-scan-eval

docker-image-update:
  stage: docker-image-update
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_BUILD_TOKEN} | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE/test:latest
    - echo "IMAGE=$CI_REGISTRY_IMAGE/test:latest" > build.env
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes:
        - Dockerfile
  artifacts:
    reports:
      dotenv: build.env

.base:
  script:
    - echo "Fetch the main branch"
    - git fetch origin main:refs/remotes/origin/main -a
    - echo "Install NPM packages in the common folder"
    - node common/scripts/install-run-rush.js install
    - node common/scripts/install-run-rush.js check
    - node common/scripts/install-run-rush.js rebuild --verbose
    - node common/scripts/install-run-rush.js test:only --verbose
    - node common/scripts/install-run-rush.js make-badges --ci

build-and-test:
  image: $IMAGE
  extends: 
    - .base
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  stage: build-and-test
  dependencies: 
    - docker-image-update

include:
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Jobs/SAST.gitlab-ci.yml
  - template: Jobs/Secret-Detection.gitlab-ci.yml
  - template: Jobs/SAST-IaC.latest.gitlab-ci.yml

# Overrides for Security and Jobs templates to run during merge request
container_scanning:
  stage: security-scan
  rules: 
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  variables:
    DOCKER_IMAGE: $IMAGE
  dependencies: 
    - docker-image-update

sast:
  stage: security-scan

eslint-sast:
  rules: 
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  artifacts:
    paths:
      - $SAST_SCAN_REPORT_FILE

nodejs-scan-sast:
  rules: 
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  artifacts:
    paths:
      - $SAST_SCAN_REPORT_FILE

semgrep-sast:
  rules: 
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  artifacts:
    paths:
      - $SAST_SCAN_REPORT_FILE

.secret-analyzer:
  stage: security-scan
    
secret_detection:
  rules: 
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  artifacts:
    paths:
      # in the "parent" job this file is declared as a report artifact, but
      # we also need it as a regular artifact for the subsequent job
      - $SECRET_DETECTION_REPORT_FILE

iac-sast:
  stage: security-scan

kics-iac-sast:
  rules: 
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'

## Fail on Secret Detection
.security-scan-eval:
  image: $IMAGE
  stage: security-scan-eval
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  variables:
    # this job only requires the $SECRET_DETECTION_REPORT_FILE
    GIT_STRATEGY: none
  script:
    # check if '{ "vulnerabilities": [], ..' is empty in the report file if it exists
    - |
      vulnerability_flag=false
      for file in $REPORT_FILE
      do
        if [ -f "$file" ]; then
          if [ "$(jq ".vulnerabilities | length" $file)" -gt 0 ]; then
            echo "Vulnerabilities detected. Please analyze the artifact $file produced by the $JOB job."
            vulnerability_flag=true
          else
            echo "No Vulnerabilities detected for the artifact $file produced by the $JOB job."
          fi
        else
          echo "Artifact $file does not exist. The $JOB job likely didn't create one. Hence, no evaluation can be performed."
          vulnerability_flag=true
        fi
      done
      if [ $vulnerability_flag = true ]; then
        exit 1
      fi

## Fail on SAST Vulnerability
eslint-sast-eval:
  extends:
    - .security-scan-eval
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  dependencies:
    - docker-image-update
    - eslint-sast
  variables:
    # this job only requires the $CONTAINER_SCANNING_REPORT_FILE
    GIT_STRATEGY: none
    REPORT_FILE: $SAST_SCAN_REPORT_FILE
    JOB: 'eslint-sast'
  allow_failure: true

nodejs-scan-sast-eval:
  extends:
    - .security-scan-eval
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  dependencies:
    - docker-image-update
    - nodejs-scan-sast
  variables:
    # this job only requires the $CONTAINER_SCANNING_REPORT_FILE
    GIT_STRATEGY: none
    REPORT_FILE: $SAST_SCAN_REPORT_FILE
    JOB: 'nodejs-scan-sast'
  allow_failure: true

semgrep-sast-eval:
  extends:
    - .security-scan-eval
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  dependencies:
    - docker-image-update
    - semgrep-sast
  variables:
    # this job only requires the $CONTAINER_SCANNING_REPORT_FILE
    GIT_STRATEGY: none
    REPORT_FILE: $SAST_SCAN_REPORT_FILE
    JOB: 'semgrep-sast'
  allow_failure: true

## Fail on Secret Detection
secret-scan-eval:
  extends:
    - .security-scan-eval
  dependencies:
    - docker-image-update
    - secret_detection
  variables:
    # this job only requires the $SECRET_DETECTION_REPORT_FILE
    GIT_STRATEGY: none
    REPORT_FILE: $SECRET_DETECTION_REPORT_FILE
    JOB: 'secret_detection'

## Fail on Container Vulnerability
container-scan-eval:
  extends:
    - .security-scan-eval
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  dependencies:
    - docker-image-update
    - container_scanning
  variables:
    # this job only requires the $CONTAINER_SCANNING_REPORT_FILE
    GIT_STRATEGY: none
    REPORT_FILE: $CONTAINER_SCAN_REPORT_FILE
    JOB: 'container_scanning'
  allow_failure: true

update-stable-docker-image:
  stage: update-stable-docker-image
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(echo -n ${CI_REGISTRY_USER}:${CI_BUILD_TOKEN} | base64)\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $CI_REGISTRY_IMAGE/stable
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      exists:
        - Dockerfile
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - Dockerfile