description: SSM document to provision a Sagemaker instance
assumeRole: ''
schemaVersion: '0.3'
parameters:
  ProductId:
    type: String
    description: 'The ProductId to be used from Service Catalog'
    default: ''
  EncryptionKeyArn:
    type: String
    description: 'The encryption key ARN to be used'
    default: ''
  CIDR:
    type: String
    description: 'The initial CIDR block to be granted access'
    default: ''
  ProvisioningArtifactId:
    type: String
    description: 'The ProvisioningArtifactId to be used from Service Catalog'
    default: ''
  VPC:
    type: String
    description: 'The VPC to be used where the environment will reside'
    default: ''
  Subnet:
    type: String
    description: 'The Subnet to be used where the environment will reside'
    default: ''
  EnvId:
    type: String
    description: 'The ID of the environment resource stored in DDB'
    default: ''
  Namespace:
    type: String
    description: 'The namespace to be used for creating the CfN stack resources'
    default: 'swbv2-Sagemaker'
  InstanceName:
    type: String
    description: '(Required) The name of the Sagemaker instance being provisioned.'
    default: ''
  PathId:
    type: String
    description: 'The Path ID for the Service Catalog product.'
    default: ''
  EventBusName:
    type: String
    description: 'The main account event bridge bus name.'
    default: ''
  EnvironmentInstanceFiles:
    type: String
    description: 'An S3 URI (starting with "s3://") that specifies the location of files to be copied to the environment instance, including any bootstrap scripts'
    default: ''
  AutoStopIdleTimeInMinutes:
    type: String
    description: 'Number of idle minutes for auto stop to shutdown the instance (0 to disable auto-stop)'
    default: '0'
  EnvStatusUpdateConstString:
    type: String
    description: 'The string value used by main account to filter host events'
    default: ''
mainSteps:
  - name: LaunchSagemaker
    action: 'aws:executeAwsApi'
    inputs:
      Service: servicecatalog
      Api: ProvisionProduct
      ProductId: '{{ ProductId }}'
      ProvisionedProductName: '{{ InstanceName }}'
      PathId: '{{ PathId }}'
      ProvisioningArtifactId: '{{ ProvisioningArtifactId }}'
      ProvisioningParameters:
        - Key: EncryptionKeyArn
          Value: '{{ EncryptionKeyArn }}'
        - Key: VPC
          Value: '{{ VPC }}'
        - Key: AccessFromCIDRBlock
          Value: '{{ CIDR }}'
        - Key: S3Mounts
          Value: '[]'
        - Key: Namespace
          Value: '{{ Namespace }}'
        - Key: IamPolicyDocument
          Value: '{}'
        - Key: InstanceType
          Value: ml.t3.medium
        - Key: Subnet
          Value: '{{ Subnet }}'
        - Key: EnvironmentInstanceFiles
          Value: '{{ EnvironmentInstanceFiles }}'
        - Key: AutoStopIdleTimeInMinutes
          Value: '{{ AutoStopIdleTimeInMinutes }}'
      Tags:
        - Key: Env
          Value: '{{ EnvId }}'
    outputs:
      - Name: ProvisionedProductId
        Type: String
        Selector: '$.RecordDetail.ProvisionedProductId'
      - Name: RecordId
        Type: String
        Selector: '$.RecordDetail.RecordId'
    description: Launch Sagemaker
    nextStep: WaitForProvisioning
  - name: WaitForProvisioning
    action: 'aws:waitForAwsResourceProperty'
    timeoutSeconds: 600
    inputs:
      Service: servicecatalog
      Api: DescribeProvisionedProduct
      Id: '{{ LaunchSagemaker.ProvisionedProductId }}'
      DesiredValues:
        - AVAILABLE
      PropertySelector: '$.ProvisionedProductDetail.Status'
    outputs:
      - Name: ProvisionedProductDetail
        Type: StringMap
        Selector: '$.ProvisionedProductDetail'
    onFailure: step:PushFailureStatusToEventBridge
    nextStep: PushMetadataToEventBridge
  - name: PushMetadataToEventBridge
    action: 'aws:executeAwsApi'
    inputs:
      Service: events
      Api: PutEvents
      Entries:
        - Detail: '{ "EnvId": "{{ EnvId }}", "ProvisionedProductId": "{{ LaunchSagemaker.ProvisionedProductId }}", "RecordId": "{{ LaunchSagemaker.RecordId }}", "EnvType": "Sagemaker", "Operation": "Launch", "Status": "COMPLETED" }'
          DetailType: '{{ EnvStatusUpdateConstString }}'
          EventBusName: '{{ EventBusName }}'
          Source: 'LaunchSagemaker'
    isEnd: true
  - name: PushFailureStatusToEventBridge
    action: 'aws:executeAwsApi'
    inputs:
      Service: events
      Api: PutEvents
      Entries:
        - Detail: '{ "EnvId": "{{ EnvId }}", "ProvisionedProductId": "{{ LaunchSagemaker.ProvisionedProductId }}", "RecordId": "{{ LaunchSagemaker.RecordId }}", "EnvType": "Sagemaker", "Operation": "Launch", "Status": "FAILED" }'
          DetailType: '{{ EnvStatusUpdateConstString }}'
          EventBusName: '{{ EventBusName }}'
          Source: 'LaunchSagemaker'
    isEnd: true
