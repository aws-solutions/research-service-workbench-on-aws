description: SSM document to terminate a Sagemaker instance
schemaVersion: '0.3'
parameters:
  ProvisionedProductId:
    type: String
    description: 'The ID of the Sagemaker provisioned product being terminated.'
  TerminateToken:
    type: String
    description: '(Required) The unique token ID assigned to this request.'
  EnvId:
    type: String
    description: 'The ID of the environment resource stored in DDB'
mainSteps:
  - name: TerminateSagemaker
    action: 'aws:executeAwsApi'
    inputs:
      Service: servicecatalog
      Api: TerminateProvisionedProduct
      ProvisionedProductId: '{{ ProvisionedProductId }}'
      TerminateToken: '{{ TerminateToken }}'
    outputs:
      - Name: RecordId
        Type: String
        Selector: '$.RecordDetail.RecordId'
    nextStep: WaitForTerminating
  - name: WaitForTerminating
    action: 'aws:waitForAwsResourceProperty'
    timeoutSeconds: 600
    inputs:
      Service: servicecatalog
      Api: DescribeRecord
      Id: '{{ TerminateSagemaker.RecordId }}'
      DesiredValues:
        - SUCCEEDED
        - FAILED
      PropertySelector: '$.RecordDetail.Status'
    # aws.waitForAwsResourceProperty does not support outputs so creating another step
    nextStep: GetRecordDetail
  - name: GetRecordDetail
    action: 'aws:executeAwsApi'
    inputs:
      Service: servicecatalog
      Api: DescribeRecord
      Id: '{{ TerminateSagemaker.RecordId }}'
    outputs:
      - Name: ProductStatus
        Type: String
        Selector: '$.RecordDetail.Status'
      - Name: StatusMessage
        Type: StringList
        Selector: '$.RecordDetail.RecordErrors'
    nextStep: ChooseByStatus
  - name: ChooseByStatus
    action: 'aws:branch'
    inputs:
      Choices:
        - NextStep: PushMetadataToEventBridge
          Variable: '{{ GetRecordDetail.ProductStatus }}'
          StringEquals: SUCCEEDED
        - NextStep: PushFailureStatusToEventBridge
          Variable: '{{ GetRecordDetail.ProductStatus }}'
          StringEquals: FAILED
      Default: PushFailureStatusToEventBridge
  - name: PushMetadataToEventBridge
    action: 'aws:executeAwsApi'
    inputs:
      Service: events
      Api: PutEvents
      Entries:
        - Detail: '{ "EnvId": "{{ EnvId }}", "ProvisionedProductId": "{{ ProvisionedProductId }}", "RecordId": "{{ TerminateSagemaker.RecordId }}", "EnvType": "Sagemaker", "Operation": "Terminate", "Status": "TERMINATED" }'
          DetailType: 'Terminate'
          EventBusName: 'default'
          Source: 'automation' # This is being used for updating env in statusHandler lambda
    isEnd: true
  - name: PushFailureStatusToEventBridge
    action: 'aws:executeAwsApi'
    inputs:
      Service: events
      Api: PutEvents
      Entries:
        - Detail: '{ "EnvId": "{{ EnvId }}", "ProvisionedProductId": "{{ ProvisionedProductId }}", "RecordId": "{{ TerminateSagemaker.RecordId }}", "EnvType": "Sagemaker", "Operation": "Terminate", "Status": "TERMINATING_FAILED", "StatusMessage": {{ GetRecordDetail.StatusMessage }} }'
          DetailType: 'Terminate'
          EventBusName: 'default'
          Source: 'automation' # This is being used for updating env in statusHandler lambda
    isEnd: true
