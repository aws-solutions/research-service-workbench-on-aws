description: SSM document to provision a Sagemaker Notebook instance
assumeRole: ''
schemaVersion: '0.3'
parameters:
  ProductId:
    type: String
    description: 'The ProductId to be used from Service Catalog'
  EncryptionKeyArn:
    type: String
    description: 'The encryption key ARN to be used'
  CIDR:
    type: String
    description: 'The initial CIDR block to be granted access'
  ProvisioningArtifactId:
    type: String
    description: 'The ProvisioningArtifactId to be used from Service Catalog'
  VPC:
    type: String
    description: 'The VPC to be used where the environment will reside'
  Subnet:
    type: String
    description: 'The Subnet to be used where the environment will reside'
  EnvId:
    type: String
    description: 'The ID of the environment resource stored in DDB'
  Namespace:
    type: String
    description: 'The namespace to be used for creating the CfN stack resources'
    default: 'swbv2-Sagemaker'
  InstanceName:
    type: String
    description: '(Required) The name of the Sagemaker instance being provisioned.'
  PathId:
    type: String
    description: 'The Path ID for the Service Catalog product.'
  EnvironmentInstanceFiles:
    type: String
    description: 'An S3 URI (starting with "s3://") that specifies the location of files to be copied to the environment instance, including any bootstrap scripts'
  AutoStopIdleTimeInMinutes:
    type: String
    description: 'Number of idle minutes for auto stop to shutdown the instance (0 to disable auto-stop)'
    default: '0'
  InstanceType:
    type: String
    description: 'The size of the notebook instance coming from environment type config'
  S3Mounts:
    type: String
    description: Stringified array of dataset objects containing their mountString
  IamPolicyDocument:
    type: String
    description: The IAM policy to be associated with the launched workstation
  DatasetsBucketArn:
    type: String
    description: The ARN of the Datasets bucket in the main account
  MainAccountId:
    type: String
    description: The Main Account ID where application is deployed
  MainAccountRegion:
    type: String
    description: The region of application deployment in main account
mainSteps:
  - name: Launch
    action: 'aws:executeAwsApi'
    maxAttempts: 3
    timeoutSeconds: 30
    inputs:
      Service: servicecatalog
      Api: ProvisionProduct
      ProductId: '{{ ProductId }}'
      ProvisionedProductName: '{{ InstanceName }}'
      PathId: '{{ PathId }}'
      ProvisioningArtifactId: '{{ ProvisioningArtifactId }}'
      ProvisioningParameters:
        - Key: EncryptionKeyArn
          Value: '{{ EncryptionKeyArn }}'
        - Key: VPC
          Value: '{{ VPC }}'
        - Key: AccessFromCIDRBlock
          Value: '{{ CIDR }}'
        - Key: S3Mounts
          Value: '{{ S3Mounts }}'
        - Key: Namespace
          Value: '{{ Namespace }}'
        - Key: IamPolicyDocument
          Value: '{{ IamPolicyDocument }}'
        - Key: InstanceType
          Value: '{{ InstanceType }}'
        - Key: Subnet
          Value: '{{ Subnet }}'
        - Key: EnvironmentInstanceFiles
          Value: '{{ EnvironmentInstanceFiles }}'
        - Key: AutoStopIdleTimeInMinutes
          Value: '{{ AutoStopIdleTimeInMinutes }}'
        - Key: DatasetsBucketArn
          Value: '{{ DatasetsBucketArn }}'
        - Key: MainAccountId
          Value: '{{ MainAccountId }}'
        - Key: MainAccountRegion
          Value: '{{ MainAccountRegion }}'
      Tags:
        - Key: Env
          Value: '{{ EnvId }}'
    outputs:
      - Name: ProvisionedProductId
        Type: String
        Selector: '$.RecordDetail.ProvisionedProductId'
      - Name: RecordId
        Type: String
        Selector: '$.RecordDetail.RecordId'
    description: Launch Sagemaker
    nextStep: WaitForProvisioning
  - name: WaitForProvisioning
    action: 'aws:waitForAwsResourceProperty'
    timeoutSeconds: 600
    inputs:
      Service: servicecatalog
      Api: DescribeProvisionedProduct
      Id: '{{ Launch.ProvisionedProductId }}'
      DesiredValues:
        - AVAILABLE
        - ERROR
      PropertySelector: '$.ProvisionedProductDetail.Status'
    # aws.waitForAwsResourceProperty does not support outputs so creating another step
    nextStep: GetProvisionedProductDetail
  - name: GetProvisionedProductDetail
    action: 'aws:executeAwsApi'
    inputs:
      Service: servicecatalog
      Api: DescribeProvisionedProduct
      Id: '{{ Launch.ProvisionedProductId }}'
    outputs:
      - Name: ProductStatus
        Type: String
        Selector: '$.ProvisionedProductDetail.Status'
      - Name: ErrorMessage
        Type: String
        Selector: '$.ProvisionedProductDetail.StatusMessage'
    nextStep: ChooseByStatus
  - name: ChooseByStatus
    action: 'aws:branch'
    inputs:
      Choices:
        - NextStep: PushMetadataToEventBridge
          Variable: '{{ GetProvisionedProductDetail.ProductStatus }}'
          StringEquals: AVAILABLE
        - NextStep: PushFailureStatusToEventBridge
          Variable: '{{ GetProvisionedProductDetail.ProductStatus }}'
          StringEquals: ERROR
      Default: PushFailureStatusToEventBridge
  - name: PushMetadataToEventBridge
    action: 'aws:executeAwsApi'
    inputs:
      Service: events
      Api: PutEvents
      Entries:
        - Detail: '{ "EnvId": "{{ EnvId }}", "ProvisionedProductId": "{{ Launch.ProvisionedProductId }}", "RecordId": "{{ Launch.RecordId }}", "EnvType": "sagemakerNotebook", "Operation": "Launch", "Status": "COMPLETED" }'
          DetailType: 'Launch'
          EventBusName: 'default'
          Source: 'automation' # This is being used for updating env in statusHandler lambda
    isEnd: true
  - name: PushFailureStatusToEventBridge
    action: 'aws:executeAwsApi'
    inputs:
      Service: events
      Api: PutEvents
      Entries:
        - Detail: '{ "EnvId": "{{ EnvId }}", "ProvisionedProductId": "{{ Launch.ProvisionedProductId }}", "RecordId": "{{ Launch.RecordId }}", "EnvType": "sagemakerNotebook", "Operation": "Launch", "Status": "FAILED", "ErrorMessage": "{{ GetProvisionedProductDetail.ErrorMessage }}" }'
          DetailType: 'Launch'
          EventBusName: 'default'
          Source: 'automation' # This is being used for updating env in statusHandler lambda
    isEnd: true
