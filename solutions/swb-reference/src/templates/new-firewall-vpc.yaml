AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  Security VPC Deployment: Network Firewall (e.g. VM-Series) Deployment with AWS Gateway Load Balancer (GWLB)
# ======================================================================================================================
#   Parameters
# ======================================================================================================================

Parameters:

# Management Network CIDR

  RemoteManagementCIDR:
    Description: >-
      Remote Management CIDR to be allowed management access to Network Firewall (e.g. 192.168.0.0/25)
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2})
    ConstraintDescription: Must be a valid CIDR (e.g. 0.0.0.0/0)

# Security VPC CIDR IP Range

  SecurityVPCCIDR:
    Description: >-
      CIDR Address Range for SecurityVPC (e.g. 10.0.0.0/22)
    Type: String
    Default: 10.0.0.0/22
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be in a CIDR (e.g. 192.168.0.0/25)

# FirewallDataSubnet Subnets CIDRs

  SecurityVPCFirewallDataSubnetCIDRAZ1:
    Description: >-
      CIDR for Network Firewall Data Subnet (e.g. 10.0.0.0/28)
    Type: String
    Default: 10.0.0.0/28
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be in a CIDR (e.g. 192.168.0.0/28)

  SecurityVPCFirewallDataSubnetCIDRAZ2:
    Description: >-
      CIDR for Network Firewall Data Subnet (e.g. 10.0.0.16/28)
    Type: String
    Default: 10.0.0.16/28
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be in a CIDR (e.g. 192.168.0.0/28)

# GWLBe Subnets CIDRs

  SecurityVPCGWLBESubnetCIDRAZ1:
    Description: >-
      CIDR for GWLBE Subnet (e.g. 10.0.0.96/28)
    Type: String
    Default: 10.0.0.96/28
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be in a CIDR (e.g. 192.168.0.0/28)

  SecurityVPCGWLBESubnetCIDRAZ2:
    Description: >-
      CIDR for GWLBE Subnet (e.g. 10.0.0.112/28)
    Type: String
    Default: 10.0.0.112/28
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be in a CIDR (e.g. 192.168.0.0/28)

# NATGW Subnets CIDRs

  SecurityVPCNATGWSubnetCIDRAZ1:
    Description: >-
      CIDR for NAT Gateway Subnet (e.g. 10.0.0.192/28)
    Type: String
    Default: 10.0.0.192/28
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be in a CIDR (e.g. 192.168.0.0/28)

  SecurityVPCNATGWSubnetCIDRAZ2:
    Description: >-
      CIDR for NAT Gateway Subnet (e.g. 10.0.0.208/28)
    Type: String
    Default: 10.0.0.208/28
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be in a CIDR (e.g. 192.168.0.0/28)

#  TGW Attachment Subnets CIDRs

  SecurityVPCTGWSubnetCIDRAZ1:
    Description: >-
      CIDR for TGW Subnet (e.g. 10.0.1.0/28)
    Type: String
    Default: 10.0.1.0/28
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be in a CIDR (e.g. 192.168.0.0/28)

  SecurityVPCTGWSubnetCIDRAZ2:
    Description: >-
      CIDR for TGW Subnet (e.g. 10.0.1.16/28)
    Type: String
    Default: 10.0.1.16/28
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be in a CIDR (e.g. 192.168.0.0/28)

# Network Firewall (e.g. VM-Series) Instance

  FirewallInstanceType:
    Description: >-
      More information follow this link: https://docs.paloaltonetworks.com/vm-series/10-0/vm-series-performance-capacity/vm-series-performance-capacity/vm-series-on-aws-models-and-instances.html
    Type: String
    AllowedValues:
      - m3.xlarge
      - m3.2xlarge
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - m5n.large
      - m5n.xlarge
      - m5n.2xlarge
      - m5n.4xlarge
      - m5n.8xlarge
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.9xlarge
      - c5n.18xlarge
    Default: m5.xlarge

  FirewallAMI:
    Description: >-
      AMI reference in the format 'ami-00000000000' for PAN-OS v10.0.2 or above.
    Type: AWS::EC2::Image::Id

  EC2KeyPair:
    Description: >-
      AWS EC2 Instance Key Pair for authentication to the Network Firewall (e.g. VM-Series).
    Type: AWS::EC2::KeyPair::KeyName
    AllowedPattern: .+
    ConstraintDescription: Must set an EC2 Key Pair for Network Firewall (e.g. VM-Series)

  TGWID:
    Description: >-
      Enter Transit Gateway ID to in the format tgw-0a1b2c3d4e5f6a7b8 or leave blank if you chose not to attach to a Transit Gateway. You will need to ammend this attachment after connection to enable Appliance Mode.
    Type: String
    AllowedPattern: tgw-\w{1,30}|^$
    ConstraintDescription: Must be a valid TGW ID (e.g. tgw-0a983c84cfca39f4c) or left blank for No TGW Attachment

  FirewallBootstrapS3BucketName:
    Description: >-
      Enter a AWS S3 Bucket containing the Network Firewall (e.g. VM-Series) Bootstrap files and folders or leave blank if you chose not to configure the firewalls with Bootstrap. For more information follow this link: https://docs.paloaltonetworks.com/vm-series/10-0/vm-series-deployment/bootstrap-the-vm-series-firewall.html
    Type: String
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$|^$
    ConstraintDescription: Must be a valid S3 Bucket name or left blank for no Bootstrap.

# ======================================================================================================================
#   Metadata
# ======================================================================================================================

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Security VPC"
        Parameters:
          - SecurityVPCCIDR
          - SecurityVPCFirewallDataSubnetCIDRAZ1
          - SecurityVPCFirewallDataSubnetCIDRAZ2
          - SecurityVPCGWLBESubnetCIDRAZ1
          - SecurityVPCGWLBESubnetCIDRAZ2
          - SecurityVPCNATGWSubnetCIDRAZ1
          - SecurityVPCNATGWSubnetCIDRAZ2
          - SecurityVPCTGWSubnetCIDRAZ1
          - SecurityVPCTGWSubnetCIDRAZ2 
      -
        Label:
          default: "Network Firewall Deployment"
        Parameters:
          - FirewallAMI
          - FirewallInstanceType
          - EC2KeyPair
          - FirewallBootstrapS3BucketName
      -
        Label:
          default: "Transit Gateway Attachment"
        Parameters:
          - TGWID
      -
        Label:
          default: "Other Parameters"
        Parameters:
          - RemoteManagementCIDR

    ParameterLabels:
      FirewallBootstrapS3BucketName:
        default: "AWS S3 Bucket Name containing the Network Firewall (e.g. VM-Series) Bootstrap Information:"
      TGWID:
        default: "Specify which AWS Transit Gateway to attach to:"
      SecurityVPCCIDR:
        default: "IP CIDR for the Security VPC"
      SecurityVPCFirewallDataSubnetCIDRAZ1:
        default: "IP CIDR for Network Firewall (e.g. VM-Series) Data Plane Interface in AZ1"
      SecurityVPCFirewallDataSubnetCIDRAZ2:
        default: "IP CIDR for Network Firewall (e.g. VM-Series) Data Plane Interface in AZ2"
      SecurityVPCGWLBESubnetCIDRAZ1:
        default: "IP CIDR for GWLB Endpoint in AZ1"
      SecurityVPCGWLBESubnetCIDRAZ2:
        default: "IP CIDR for GWLB Endpoint in AZ2"
      SecurityVPCNATGWSubnetCIDRAZ1:
        default: "IP CIDR for NAT GW Subnet in AZ1"
      SecurityVPCNATGWSubnetCIDRAZ2:
        default: "IP CIDR for NAT GW Subnet in AZ2"  
      SecurityVPCTGWSubnetCIDRAZ1:
        default: "IP CIDR for TGW Attachment in AZ1"
      SecurityVPCTGWSubnetCIDRAZ2:
        default: "IP CIDR for TGW Attachment in AZ2"
      FirewallAMI:
        default: "AMI ID of Network Firewall (e.g. VM-Series)"
      FirewallInstanceType:
        default: "EC2 Instance Type for Network Firewall (e.g. VM-Series)"
      EC2KeyPair:
        default: "EC2 Keypair for Authentication to EC2 Instances"
      RemoteManagementCIDR:
        default: "IP CIDR for Allowed Remote Management of the Network Firewall (e.g. VM-Series)"

# ======================================================================================================================
#   Conditions
# ======================================================================================================================

Conditions:
  #CreateAttachmentToTGW: !Not [!Equals [!Ref TGWID, ""]]
  NoExistingTGW: !Equals [!Ref TGWID, ""]
  BootstrapFirewall: !Not [!Equals [!Ref FirewallBootstrapS3BucketName, ""]]

# ======================================================================================================================
#   Resources
# ======================================================================================================================
Resources:
# ----------------------------------------------------------------------------------------------------------------------
# Create NEW Transit Gateway if not existed already
# ----------------------------------------------------------------------------------------------------------------------
  TransitGateway:
    Type: AWS::EC2::TransitGateway
    Condition: NoExistingTGW
    Properties:
      Description: Tranist gateway to connect member VPCs with Security VPC for inspection
      AutoAcceptSharedAttachments: enable
      Tags:
        - Key: Name
          Value: !Join [ '-' , [ !Ref "AWS::StackName", 'TGW'] ]

# ----------------------------------------------------------------------------------------------------------------------
# Create NEW Transit Gateway Routetable Security and Application
# ----------------------------------------------------------------------------------------------------------------------
  TGWSecurityRouteTable:
    Type: AWS::EC2::TransitGatewayRouteTable
    Properties:
      TransitGatewayId: !If [NoExistingTGW, !Ref TransitGateway, !Ref TGWID]
      Tags:
        - Key: name
          Value: SecurityVPC-RouteTable

  TGWApplicationRouteTable:
    Type: AWS::EC2::TransitGatewayRouteTable
    Properties:
      TransitGatewayId: !If [NoExistingTGW, !Ref TransitGateway, !Ref TGWID]
      Tags:
        - Key: name
          Value: ApplicationVPC-RouteTable

# ----------------------------------------------------------------------------------------------------------------------
# VPC, IGW, and IGW Attachment
# ----------------------------------------------------------------------------------------------------------------------
  SecurityVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref SecurityVPCCIDR
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref "AWS::StackName", "SecurityVPC" ]]
  SecurityIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref "AWS::StackName", "SecurityVPC-IGW" ]]

  SecurityIGWAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref SecurityIGW
      VpcId: !Ref SecurityVPC

# ----------------------------------------------------------------------------------------------------------------------
# Lambda function to pause execution till TGW attachment becomes available
# ----------------------------------------------------------------------------------------------------------------------
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: "lambda-logs"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - "arn:aws:logs:*:*:*"

  DelayFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: "index.handler"
      Timeout: 600
      Role: !GetAtt 'LambdaRole.Arn'
      Runtime: python3.7
      Code:
        ZipFile: |
          import json
          import cfnresponse
          import time
          def handler(event, context):
            time_to_wait = int(event['ResourceProperties']['TimeToWait'])
            print('wait started')
            time.sleep(time_to_wait)
            responseData = {}
            responseData['Data'] = "wait complete"
            print("wait completed")
            cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

#-----------------------------------------------------------------------------------------------------------------------
# NAT GW Subnets
#-----------------------------------------------------------------------------------------------------------------------
  NATGWSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SecurityVPC
      CidrBlock: !Ref SecurityVPCNATGWSubnetCIDRAZ1
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      Tags:
        - Key: Name
          Value: !Join ['-' , [!Ref "AWS::StackName", 'NATGW-AZ1']]

  NATGWSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SecurityVPC
      CidrBlock: !Ref SecurityVPCNATGWSubnetCIDRAZ2
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      Tags:
        - Key: Name
          Value: !Join ['-' , [!Ref "AWS::StackName", 'NATGW-AZ2']]

#-----------------------------------------------------------------------------------------------------------------------
# Tranist gateway Attachment Subnets
#-----------------------------------------------------------------------------------------------------------------------
  TGWSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SecurityVPC
      CidrBlock: !Ref SecurityVPCTGWSubnetCIDRAZ1
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      Tags:
        - Key: Name
          Value: !Join ['-' , [!Ref "AWS::StackName", 'TGW-AZ1']]

  TGWSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SecurityVPC
      CidrBlock: !Ref SecurityVPCTGWSubnetCIDRAZ2
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      Tags:
        - Key: Name
          Value: !Join ['-' , [!Ref "AWS::StackName", 'TGW-AZ2']]

#-----------------------------------------------------------------------------------------------------------------------
# Gateway Load Balancer Endpoint Subnets
#-----------------------------------------------------------------------------------------------------------------------
  GWLBESubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SecurityVPC
      CidrBlock: !Ref SecurityVPCGWLBESubnetCIDRAZ1
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      Tags:
        - Key: Name
          Value: !Join ['-' , [!Ref "AWS::StackName", 'GWLBE-AZ1']]

  GWLBESubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SecurityVPC
      CidrBlock: !Ref SecurityVPCGWLBESubnetCIDRAZ2
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      Tags:
        - Key: Name
          Value: !Join ['-' , [!Ref "AWS::StackName", 'GWLBE-AZ2']]

#-----------------------------------------------------------------------------------------------------------------------
# Firewall Data Subnets
#-----------------------------------------------------------------------------------------------------------------------
  FirewallDataSubnetAZ1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SecurityVPC
      CidrBlock: !Ref SecurityVPCFirewallDataSubnetCIDRAZ1
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      Tags:
        - Key: Name
          Value: !Join ['-' , [!Ref "AWS::StackName", 'Firewall-Data-AZ1']]

  FirewallDataSubnetAZ2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SecurityVPC
      CidrBlock: !Ref SecurityVPCFirewallDataSubnetCIDRAZ2
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      Tags:
        - Key: Name
          Value: !Join ['-' , [!Ref "AWS::StackName", 'Firewall-Data-AZ2']]

# ----------------------------------------------------------------------------------------------------------------------
# Transit Gateway and Attachment to Security VPC
# ----------------------------------------------------------------------------------------------------------------------
  TGWSecurityAttachment:
    Type: AWS::EC2::TransitGatewayAttachment
    Properties:
      VpcId: !Ref SecurityVPC
      SubnetIds: [!Ref TGWSubnetAZ1,!Ref TGWSubnetAZ2]
      TransitGatewayId: !If [NoExistingTGW, !Ref TransitGateway, !Ref TGWID]
      Tags:
        - Key: Name
          Value: !Join [ '-' , [ !Ref "AWS::StackName", 'SecurityVPC'] ]

# ----------------------------------------------------------------------------------------------------------------------
# Delay function to wait for attachment to be available
# ----------------------------------------------------------------------------------------------------------------------
  Delay:
    Type: 'Custom::Delay'
    Properties:
      ServiceToken: !GetAtt DelayFunction.Arn
      TimeToWait: 300

# ----------------------------------------------------------------------------------------------------------------------
# Security VPC Transit Gateway Attachment Assocaition and Propagation
# ----------------------------------------------------------------------------------------------------------------------
  TGWSecurityVPCAssociation:
    Type: AWS::EC2::TransitGatewayRouteTableAssociation
    Properties:
      TransitGatewayAttachmentId: !Ref TGWSecurityAttachment
      TransitGatewayRouteTableId: !Ref TGWSecurityRouteTable

  TGWApplicationRoute:
    Type: AWS::EC2::TransitGatewayRoute
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      TransitGatewayAttachmentId: !Ref TGWSecurityAttachment
      TransitGatewayRouteTableId: !Ref TGWApplicationRouteTable

# ----------------------------------------------------------------------------------------------------------------------
# Route Tables - SecurityVPC - GWLBE
# ----------------------------------------------------------------------------------------------------------------------

  GWLBERouteTableAZ1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SecurityVPC
      Tags:
        - Key : Name
          Value: !Join ['-' , [!Ref "AWS::StackName", 'GWLBE-AZ1']]

  GWLBEDefaultRouteAZ1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref GWLBERouteTableAZ1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGWAZ1

  GWLBERouteTableAssociationAZ1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref GWLBERouteTableAZ1
      SubnetId: !Ref GWLBESubnetAZ1

  GWLBEClassARouteAZ1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref GWLBERouteTableAZ1
      DestinationCidrBlock: 10.0.0.0/8
      TransitGatewayId: !If [NoExistingTGW, !Ref TransitGateway, !Ref TGWID]
    DependsOn: TGWSecurityAttachment

  GWLBEClassBRouteAZ1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref GWLBERouteTableAZ1
      DestinationCidrBlock: 172.16.0.0/12
      TransitGatewayId: !If [NoExistingTGW, !Ref TransitGateway, !Ref TGWID]
    DependsOn: TGWSecurityAttachment

  GWLBEClassCRouteAZ1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref GWLBERouteTableAZ1
      DestinationCidrBlock: 192.168.0.0/16
      TransitGatewayId: !If [NoExistingTGW, !Ref TransitGateway, !Ref TGWID]
    DependsOn: TGWSecurityAttachment

  GWLBERouteTableAZ2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SecurityVPC
      Tags:
        - Key : Name
          Value: !Join ['-' , [!Ref "AWS::StackName", 'GWLBE-AZ2']]

  GWLBEDefaultRouteAZ2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref GWLBERouteTableAZ2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGWAZ2

  GWLBERouteTableAssociationAZ2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref GWLBERouteTableAZ2
      SubnetId: !Ref GWLBESubnetAZ2

  GWLBEClassARouteAZ2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref GWLBERouteTableAZ2
      DestinationCidrBlock: 10.0.0.0/8
      TransitGatewayId: !If [NoExistingTGW, !Ref TransitGateway, !Ref TGWID]
    DependsOn: TGWSecurityAttachment

  GWLBEClassBRouteAZ2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref GWLBERouteTableAZ2
      DestinationCidrBlock: 172.16.0.0/12
      TransitGatewayId: !If [NoExistingTGW, !Ref TransitGateway, !Ref TGWID]
    DependsOn: TGWSecurityAttachment

  GWLBEClassCRouteAZ2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref GWLBERouteTableAZ2
      DestinationCidrBlock: 192.168.0.0/16
      TransitGatewayId: !If [NoExistingTGW, !Ref TransitGateway, !Ref TGWID]
    DependsOn: TGWSecurityAttachment

# ----------------------------------------------------------------------------------------------------------------------
# Route Tables - SecurityVPC - Nat Gateway
# ----------------------------------------------------------------------------------------------------------------------

  NATGWRouteTableAZ1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SecurityVPC
      Tags:
        - Key : Name
          Value: !Join ['-' , [!Ref "AWS::StackName", 'NATGW-AZ1']]

  NATGWRouteTableAZ2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SecurityVPC
      Tags:
        - Key : Name
          Value: !Join ['-' , [!Ref "AWS::StackName", 'NATGW-AZ2']]

  NATGWDefaultRouteAZ1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NATGWRouteTableAZ1
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SecurityIGW

  NATGWDefaultRouteAZ2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NATGWRouteTableAZ2
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref SecurityIGW

  NATGWClassARouteAZ1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NATGWRouteTableAZ1
      DestinationCidrBlock: 10.0.0.0/8
      VpcEndpointId: !Ref GWLBEAZ1

  NATGWClassBRouteAZ1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NATGWRouteTableAZ1
      DestinationCidrBlock: 172.16.0.0/12
      VpcEndpointId: !Ref GWLBEAZ1

  NATGWClassCRouteAZ1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NATGWRouteTableAZ1
      DestinationCidrBlock: 192.168.0.0/16
      VpcEndpointId: !Ref GWLBEAZ1

  NATGWClassARouteAZ2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NATGWRouteTableAZ2
      DestinationCidrBlock: 10.0.0.0/8
      VpcEndpointId: !Ref GWLBEAZ2

  NATGWClassBRouteAZ2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NATGWRouteTableAZ2
      DestinationCidrBlock: 172.16.0.0/12
      VpcEndpointId: !Ref GWLBEAZ2

  NATGWClassCRouteAZ2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NATGWRouteTableAZ2
      DestinationCidrBlock: 192.168.0.0/16
      VpcEndpointId: !Ref GWLBEAZ2

  NATGWRouteTableAssociationAZ1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NATGWRouteTableAZ1
      SubnetId: !Ref NATGWSubnetAZ1

  NATGWRouteTableAssociationAZ2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NATGWRouteTableAZ2
      SubnetId: !Ref NATGWSubnetAZ2

# ----------------------------------------------------------------------------------------------------------------------
# Route Table - SecurityVPC - TGW
# ----------------------------------------------------------------------------------------------------------------------

  TGWRouteTableAZ1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SecurityVPC
      Tags:
        - Key : Name
          Value: !Join ['-' , [!Ref "AWS::StackName", 'TGW-AZ1']]

  TGWRouteTableAZ2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SecurityVPC
      Tags:
        - Key : Name
          Value: !Join ['-' , [!Ref "AWS::StackName", 'TGW-AZ2']]

  TGWDefaultRouteAZ1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref TGWRouteTableAZ1
      DestinationCidrBlock: 0.0.0.0/0
      VpcEndpointId: !Ref GWLBEAZ1

  TGWDefaultRouteAZ2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref TGWRouteTableAZ2
      DestinationCidrBlock: 0.0.0.0/0
      VpcEndpointId: !Ref GWLBEAZ2

  TGWRouteTableAssociationAZ1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref TGWRouteTableAZ1
      SubnetId: !Ref TGWSubnetAZ1

  TGWRouteTableAssociationAZ2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref TGWRouteTableAZ2
      SubnetId: !Ref TGWSubnetAZ2

# ----------------------------------------------------------------------------------------------------------------------
# SecurityVPC - NAT Gateways with EIPs
# ----------------------------------------------------------------------------------------------------------------------

  NATGWEIPAZ1:
    Type: AWS::EC2::EIP
    DependsOn: SecurityIGWAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Join ['-' , [!Ref "AWS::StackName", 'NATGW-AZ1']]

  NATGWEIPAZ2:
    Type: AWS::EC2::EIP
    DependsOn: SecurityIGWAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Join ['-' , [!Ref "AWS::StackName", 'NATGW-AZ2']]

  NATGWAZ1:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref NATGWSubnetAZ1
      AllocationId: !GetAtt NATGWEIPAZ1.AllocationId
      Tags:
        - Key: Name
          Value: !Join ['-' , [!Ref "AWS::StackName", 'NATGW-AZ1']]

  NATGWAZ2:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref NATGWSubnetAZ2
      AllocationId: !GetAtt NATGWEIPAZ2.AllocationId
      Tags:
        - Key: Name
          Value: !Join ['-' , [!Ref "AWS::StackName", 'NATGW-AZ2']]

# ----------------------------------------------------------------------------------------------------------------------
# Route Table - SecurityVPC - Firewall & Data
# ----------------------------------------------------------------------------------------------------------------------

  FirewallDataRouteTableAZ1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SecurityVPC
      Tags:
        - Key : Name
          Value: !Join ['-' , [!Ref "AWS::StackName", 'FirewallData-AZ1']]

  FirewallDataRouteTableAZ2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SecurityVPC
      Tags:
        - Key : Name
          Value: !Join ['-' , [!Ref "AWS::StackName", 'FirewallData-AZ2']]

  FirewallDataRouteTableAssociationAZ1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FirewallDataRouteTableAZ1
      SubnetId: !Ref FirewallDataSubnetAZ1

  FirewallDataRouteTableAssociationAZ2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref FirewallDataRouteTableAZ2
      SubnetId: !Ref FirewallDataSubnetAZ2

# ----------------------------------------------------------------------------------------------------------------------
#  Gateway Load Balancer
# ----------------------------------------------------------------------------------------------------------------------

  GWLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Join ['-' , [ !Ref "AWS::StackName", 'GWLB' ]]
      Type: gateway
      Subnets: [!Ref FirewallDataSubnetAZ1, !Ref FirewallDataSubnetAZ2]
      LoadBalancerAttributes:
        - Key: load_balancing.cross_zone.enabled
          Value: true

  GWLBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Join ['-' , [ !Ref "AWS::StackName", 'Firewall' ]]
      Port: 6081
      Protocol: GENEVE
      HealthCheckPort: 80
      HealthCheckProtocol: TCP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 20
      VpcId: !Ref SecurityVPC

      TargetType: instance
      Targets:
        - Id: !Ref FirewallInstanceAZ1
        - Id: !Ref FirewallInstanceAZ2
      Tags:
        - Key: Name
          Value: !Join ['-' , [!Ref "AWS::StackName", 'GWLB']]

  GWLBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref GWLBTargetGroup
      LoadBalancerArn: !Ref GWLB

  # ----------------------------------------------------------------------------------------------------------------------
  #  Gateway Load Balancer - VPC Endpoint Service
  # ----------------------------------------------------------------------------------------------------------------------

  GWLBEService:
    Type: AWS::EC2::VPCEndpointService
    Properties:
      GatewayLoadBalancerArns:
        - !Ref GWLB
      AcceptanceRequired: false

  DescribeGWLBEServiceLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ec2:DescribeVpcEndpointServiceConfigurations
                  - ec2:DescribeVpcEndpointServicePermissions
                  - ec2:DescribeVpcEndpointServices
                Resource: "*"

  DescribeGWLBEService:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "index.handler"
      Role: !GetAtt
        - DescribeGWLBEServiceLambdaExecutionRole
        - Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json
          import logging
          import time
          def handler(event, context):
            time.sleep(600)
            logger = logging.getLogger()
            logger.setLevel(logging.INFO)
            responseData = {}
            responseStatus = cfnresponse.FAILED
            logger.info('Received event: {}'.format(json.dumps(event)))
            if event["RequestType"] == "Delete":
              responseStatus = cfnresponse.SUCCESS
              cfnresponse.send(event, context, responseStatus, responseData)
            if event["RequestType"] == "Create":
              try:
                VpceServiceId = event["ResourceProperties"]["Input"]
              except Exception as e:
                logger.info('VPC Endpoint Service Id retrival failure: {}'.format(e))
              try:
                ec2 = boto3.client('ec2')
              except Exception as e:
                logger.info('boto3.client failure: {}'.format(e))
              try:
                response = ec2.describe_vpc_endpoint_service_configurations(
                  Filters=[
                    {
                      'Name': 'service-id',
                      'Values': [VpceServiceId]
                    }
                  ]
                )
              except Exception as e:
                logger.info('ec2.describe_vpc_endpoint_service_configurations fa: {}'.format(e))
              ServiceName = response['ServiceConfigurations'][0]['ServiceName']
              logger.info('service name: {}'.format(ServiceName))
              responseData['Data'] = ServiceName
              responseStatus = cfnresponse.SUCCESS
              cfnresponse.send(event, context, responseStatus, responseData)
      Runtime: python3.7
      Timeout: 900

  GWLBEServiceName:
    Type: Custom::DescribeVpcEndpointServiceConfigurations
    Properties:
      ServiceToken: !GetAtt DescribeGWLBEService.Arn
      Input: !Ref GWLBEService

  GWLBServicePermissions:
    Type: AWS::EC2::VPCEndpointServicePermissions
    Properties: 
      AllowedPrincipals: 
        - "*"
      ServiceId: !Ref GWLBEService


# ----------------------------------------------------------------------------------------------------------------------
# Security VPC - Gateway Load Balancer Endpoint
# ----------------------------------------------------------------------------------------------------------------------

  GWLBEAZ1:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref SecurityVPC
      ServiceName: !GetAtt GWLBEServiceName.Data
      VpcEndpointType: GatewayLoadBalancer
      SubnetIds: [ !Ref GWLBESubnetAZ1 ]

  GWLBEAZ2:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref SecurityVPC
      ServiceName: !GetAtt GWLBEServiceName.Data
      VpcEndpointType: GatewayLoadBalancer
      SubnetIds: [ !Ref GWLBESubnetAZ2 ]
# ----------------------------------------------------------------------------------------------------------------------
# Security VPC - Management & Data Security Group
# ----------------------------------------------------------------------------------------------------------------------

  FirewallManagementSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref SecurityVPC
      GroupDescription: Network Firewall (e.g. VM-Series) Management Security Group
      SecurityGroupIngress:
        - CidrIp: !Ref RemoteManagementCIDR
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
        - CidrIp: !Ref RemoteManagementCIDR
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
      Tags:
        - Key: Name
          Value: !Join [ '-' , [ !Ref "AWS::StackName", 'Firewall-Management'] ]

  FirewallDataSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref SecurityVPC
      GroupDescription: Network Firewall (e.g. VM-Series) Data Security Group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: -1
          ToPort: -1
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Join [ '-' , [ !Ref "AWS::StackName", 'Firewall-Data'] ]


# ----------------------------------------------------------------------------------------------------------------------
# Network Firewall (e.g. VM-Series) Deployment
# ----------------------------------------------------------------------------------------------------------------------

  FirewallManagementENIAZ1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Network Firewall (e.g. VM-Series) Management - AZ1
      GroupSet: [ !Ref FirewallManagementSecurityGroup ]
      SubnetId: !Ref NATGWSubnetAZ1
      Tags:
        - Key: Name
          Value: !Join [ '-' , [ !Ref "AWS::StackName", 'FirewallManagement-AZ1'] ]

  FirewallManagementEIPAZ1:
    Type: AWS::EC2::EIP
    DependsOn: SecurityIGWAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Join [ '-' , [ !Ref "AWS::StackName", 'FirewallManagement-AZ1'] ]

  FirewallManagementEIPAssociationAZ1:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt FirewallManagementEIPAZ1.AllocationId
      NetworkInterfaceId: !Ref FirewallManagementENIAZ1

  FirewallDataENIAZ1:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Network Firewall (e.g. VM-Series) Data - AZ1
      SourceDestCheck: No
      GroupSet: [ !Ref FirewallDataSecurityGroup ]
      SubnetId: !Ref FirewallDataSubnetAZ1
      Tags:
        - Key: Name
          Value: !Join [ '-' , [ !Ref "AWS::StackName", 'Firewall-Data-AZ1'] ]

  FirewallManagementENIAZ2:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Network Firewall (e.g. VM-Series) Management - AZ2
      GroupSet: [ !Ref FirewallManagementSecurityGroup ]
      SubnetId: !Ref NATGWSubnetAZ2
      Tags:
        - Key: Name
          Value: !Join [ '-' , [ !Ref "AWS::StackName", 'Firewall-Management-AZ2'] ]

  FirewallManagementEIPAZ2:
    Type: AWS::EC2::EIP
    DependsOn: SecurityIGWAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Join [ '-' , [ !Ref "AWS::StackName", 'Firewall-Management-AZ2'] ]

  FirewallManagementEIPAssociationAZ2:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt FirewallManagementEIPAZ2.AllocationId
      NetworkInterfaceId: !Ref FirewallManagementENIAZ2

  FirewallDataENIAZ2:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Network Firewall (e.g. VM-Series) Data - AZ2
      SourceDestCheck: No
      GroupSet: [ !Ref FirewallDataSecurityGroup ]
      SubnetId: !Ref FirewallDataSubnetAZ2
      Tags:
        - Key: Name
          Value: !Join [ '-' , [ !Ref "AWS::StackName", 'Firewall-Data-AZ2'] ]

  FirewallInstanceAZ1:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      InstanceInitiatedShutdownBehavior: stop
      EbsOptimized: true
      ImageId: !Ref FirewallAMI
      InstanceType: !Ref FirewallInstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 60
      KeyName: !Ref EC2KeyPair
      Monitoring: false
      Tags:
        - Key: Name
          Value: !Join [ '-' , [ !Ref "AWS::StackName", 'Firewall-AZ1'] ]
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref FirewallManagementENIAZ1
          DeviceIndex: '1'
        - NetworkInterfaceId: !Ref FirewallDataENIAZ1
          DeviceIndex: '0'
      IamInstanceProfile: !If [BootstrapFirewall, !Ref FirewallBootstrapInstanceProfile, !Ref AWS::NoValue]
      UserData:  !If
        - BootstrapFirewall
        - !Base64
          Fn::Join:
            - ''
            - - firewall-bootstrap-aws-s3bucket=
              - !Ref FirewallBootstrapS3BucketName
        - !Base64
          Fn::Join:
            - ';'
            - - type=dhcp-client
              - ip-address=
              - default-gateway=
              - netmask=
              - ipv6-default-gateway=
              - vm-auth-key=
              - panorama-server=
              - panorama-server-2=
              - tplname=
              - dgname=
              - dns-primary=
              - dns-secondary=
              - authcodes=
              - op-command-modes=jumbo-frame,mgmt-interface-swap
              - plugin-op-commands=aws-gwlb-inspect:enable
              - op-cmd-dpdk-pkt-io=on
              - dhcp-send-hostname=yes
              - dhcp-send-client-id=yes
              - dhcp-accept-server-hostname=yes
              - dhcp-accept-server-domain=yes

  FirewallInstanceAZ2:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      InstanceInitiatedShutdownBehavior: stop
      EbsOptimized: true
      ImageId: !Ref FirewallAMI
      InstanceType: !Ref FirewallInstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            DeleteOnTermination: true
            VolumeSize: 60
      KeyName: !Ref EC2KeyPair
      Monitoring: false
      Tags:
        - Key: Name
          Value: !Join [ '-' , [ !Ref "AWS::StackName", 'Firewall-AZ2'] ]
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref FirewallManagementENIAZ2
          DeviceIndex: '1'
        - NetworkInterfaceId: !Ref FirewallDataENIAZ2
          DeviceIndex: '0'
      IamInstanceProfile: !If [BootstrapFirewall, !Ref FirewallBootstrapInstanceProfile, !Ref AWS::NoValue]
      UserData:  !If
        - BootstrapFirewall
        - !Base64
          Fn::Join:
            - ''
            - - firewall-bootstrap-aws-s3bucket=
              - !Ref FirewallBootstrapS3BucketName
        - !Base64
          Fn::Join:
            - ';'
            - - type=dhcp-client
              - ip-address=
              - default-gateway=
              - netmask=
              - ipv6-default-gateway=
              - vm-auth-key=
              - panorama-server=
              - panorama-server-2=
              - tplname=
              - dgname=
              - dns-primary=
              - dns-secondary=
              - authcodes=
              - op-command-modes=jumbo-frame, mgmt-interface-swap
              - plugin-op-commands=aws-gwlb-inspect:enable
              - op-cmd-dpdk-pkt-io=on
              - dhcp-send-hostname=yes
              - dhcp-send-client-id=yes
              - dhcp-accept-server-hostname=yes
              - dhcp-accept-server-domain=yes

# ----------------------------------------------------------------------------------------------------------------------
#   Network Firewall (e.g. VM-Series) Bootstrap IAM Role
# ----------------------------------------------------------------------------------------------------------------------

  FirewallBootstrapRole:
    Type: AWS::IAM::Role
    Condition: BootstrapFirewall
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: FirewallBootstrapRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref FirewallBootstrapS3BucketName
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Join
                  - ''
                  - - 'arn:aws:s3:::'
                    - !Ref FirewallBootstrapS3BucketName
                    - /*
              - Effect: Allow
                Action:
                  - cloudwatch:*
                Resource:
                  - '*'

  FirewallBootstrapInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: BootstrapFirewall
    Properties:
      Path: /
      Roles:
        - !Ref FirewallBootstrapRole

  S3EndpointAz1:
    Type: AWS::EC2::VPCEndpoint
    Condition: BootstrapFirewall
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:ListBucket'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref FirewallBootstrapS3BucketName
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref FirewallBootstrapS3BucketName
                - '/*'
      RouteTableIds:
        - !Ref FirewallDataRouteTableAZ1
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref SecurityVPC

  S3EndpointAz2:
    Type: AWS::EC2::VPCEndpoint
    Condition: BootstrapFirewall
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:ListBucket'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref FirewallBootstrapS3BucketName
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:GetObject'
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref FirewallBootstrapS3BucketName
                - '/*'
      RouteTableIds:
        - !Ref FirewallDataRouteTableAZ2
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcId: !Ref SecurityVPC

# ======================================================================================================================
#   Outputs
# ======================================================================================================================

Outputs:
  TGWID:
    Description: Transit Gateway ID on this account
    Value: !If [NoExistingTGW, !Ref TransitGateway, !Ref TGWID]
  GWLBServiceId:
    Description: GWLB Service ID for use for additional GWLB Endpoints
    Value: !GetAtt GWLBEServiceName.Data
  