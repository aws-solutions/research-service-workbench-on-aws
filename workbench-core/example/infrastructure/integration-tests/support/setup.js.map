{"version":3,"file":"setup.js","sourceRoot":"","sources":["setup.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;AAEH,kEAA2E;AAC3E,oDAAuB;AACvB,oEAA4C;AAC5C,gEAAwC;AAExC,MAAqB,KAAK;IAKxB;QAHQ,cAAS,GAAoB,EAAE,CAAC;QAChC,yBAAoB,GAA8B,SAAS,CAAC;QAGlE,aAAa;QACb,IAAI,CAAC,SAAS,GAAG,IAAI,kBAAQ,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;QAEtD,sEAAsE;QACtE,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IAEM,KAAK,CAAC,sBAAsB;QACjC,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAE7B,OAAO,OAAO,CAAC;IACjB,CAAC;IAEM,KAAK,CAAC,kBAAkB;QAC7B,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;IAClD,CAAC;IAEM,KAAK,CAAC,sBAAsB;QACjC,wGAAwG;QACxG,IAAI,IAAI,CAAC,oBAAoB,KAAK,SAAS,EAAE;YAC3C,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,0BAA0B,CAAC,CAAC;YAClE,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,gCAAgC,CAAC,CAAC;YACtE,MAAM,0BAA0B,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;YACpF,MAAM,0BAA0B,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;YACpF,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAElD,MAAM,mBAAmB,GAAG,IAAI,yCAAmB,CAAC,SAAS,CAAC,CAAC;YAC/D,MAAM,EAAE,WAAW,EAAE,GAAG,MAAM,mBAAmB,CAAC,oBAAoB,CAAC;gBACrE,UAAU;gBACV,QAAQ;gBACR,0BAA0B;gBAC1B,0BAA0B;aAC3B,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC;YACpD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC7B,IAAI,CAAC,oBAAoB,GAAG,OAAO,CAAC;SACrC;QACD,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACnC,CAAC;IAEM,YAAY;QACjB,OAAO,cAAc,CAAC;IACxB,CAAC;IAEM,gBAAgB;QACrB,OAAO,IAAI,gCAAU,CAAC;YACpB,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,WAAW,CAAC;YACvC,YAAY,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC,mCAAmC;SACtE,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,OAAO;QAClB,2EAA2E;QAC3E,MAAM,QAAQ,GAAG,gBAAC,CAAC,OAAO,CAAC,gBAAC,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAEpD,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;YAC9B,IAAI;gBACF,MAAM,OAAO,CAAC,OAAO,EAAE,CAAC;aACzB;YAAC,OAAO,KAAK,EAAE;gBACd,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aACtB;SACF;QAED,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,CAAC,mFAAmF;IAC1G,CAAC;IAEM,WAAW;QAChB,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IAEO,iBAAiB,CAAC,WAAoB;QAC5C,OAAO,IAAI,uBAAa,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IAC9C,CAAC;CACF;AAjFD,wBAiFC","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *  SPDX-License-Identifier: Apache-2.0\n */\n\nimport { AwsService, CognitoTokenService } from '@aws/workbench-core-base';\nimport _ from 'lodash';\nimport ClientSession from './clientSession';\nimport Settings from './utils/settings';\n\nexport default class Setup {\n  private _settings: Settings;\n  private _sessions: ClientSession[] = [];\n  private _defaultAdminSession: ClientSession | undefined = undefined;\n\n  public constructor() {\n    // @ts-ignore\n    this._settings = new Settings(global['__settings__']);\n\n    // Let's not setup test retries until we find that we actually need it\n    jest.retryTimes(0);\n  }\n\n  public async createAnonymousSession(): Promise<ClientSession> {\n    const session = this._getClientSession();\n    this._sessions.push(session);\n\n    return session;\n  }\n\n  public async createAdminSession(): Promise<ClientSession> {\n    throw new Error('Implement createAdminSession');\n  }\n\n  public async getDefaultAdminSession(): Promise<ClientSession> {\n    // TODO: Handle token expiration and getting defaultAdminSession instead of creating a new Admin Session\n    if (this._defaultAdminSession === undefined) {\n      const userPoolId = this._settings.get('ExampleCognitoUserPoolId');\n      const clientId = this._settings.get('ExampleCognitoUserPoolClientId');\n      const rootUserNameParamStorePath = this._settings.get('rootUserNameParamStorePath');\n      const rootPasswordParamStorePath = this._settings.get('rootPasswordParamStorePath');\n      const awsRegion = this._settings.get('AwsRegion');\n\n      const cognitoTokenService = new CognitoTokenService(awsRegion);\n      const { accessToken } = await cognitoTokenService.generateCognitoToken({\n        userPoolId,\n        clientId,\n        rootUserNameParamStorePath,\n        rootPasswordParamStorePath\n      });\n\n      const session = this._getClientSession(accessToken);\n      this._sessions.push(session);\n      this._defaultAdminSession = session;\n    }\n    return this._defaultAdminSession;\n  }\n\n  public getStackName(): string {\n    return `ExampleStack`;\n  }\n\n  public getMainAwsClient(): AwsService {\n    return new AwsService({\n      region: this._settings.get('AwsRegion'),\n      ddbTableName: this.getStackName() // table name is same as stack name\n    });\n  }\n\n  public async cleanup(): Promise<void> {\n    // We need to reverse the order of the queue before we cleanup the sessions\n    const sessions = _.reverse(_.slice(this._sessions));\n\n    for (const session of sessions) {\n      try {\n        await session.cleanup();\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    this._sessions = []; // This way if the cleanup() method is called again, we don't need to cleanup again\n  }\n\n  public getSettings(): Settings {\n    return this._settings;\n  }\n\n  private _getClientSession(accessToken?: string): ClientSession {\n    return new ClientSession(this, accessToken);\n  }\n}\n"]}