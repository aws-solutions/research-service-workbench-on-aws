{"version":3,"file":"clientSession.js","sourceRoot":"","sources":["clientSession.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *  SPDX-License-Identifier: Apache-2.0\n */\nimport axios, { AxiosError, AxiosInstance, AxiosResponse } from 'axios';\nimport Csrf from 'csrf';\nimport _ from 'lodash';\nimport { getResources, Resources } from './resources';\nimport Setup from './setup';\nimport HttpError from './utils/HttpError';\nimport Settings from './utils/settings';\n\nexport default class ClientSession {\n  private _settings: Settings;\n  private _cleanupQueue: CleanupTask[];\n  private _isAnonymousSession: boolean;\n  private _axiosInstance: AxiosInstance;\n  private _setup: Setup;\n  public resources: Resources;\n\n  public constructor(setup: Setup, accessToken?: string) {\n    this._settings = setup.getSettings();\n    this._setup = setup;\n    this._isAnonymousSession = accessToken === undefined;\n    this._cleanupQueue = [];\n\n    const headers: {\n      'Content-Type': string;\n      Cookie?: string;\n      'csrf-token'?: string;\n    } = { 'Content-Type': 'application/json' };\n\n    // For anonymous sessions, access token cookie is not required\n    if (!this._isAnonymousSession) {\n      const csrf = new Csrf();\n      const secret = csrf.secretSync();\n      const token = csrf.create(secret);\n      headers.Cookie = `access_token=${accessToken};_csrf=${secret};`;\n      headers['csrf-token'] = token;\n    }\n\n    this._axiosInstance = axios.create({\n      baseURL: this._settings.get('ExampleAPIEndpoint'),\n      timeout: 30000, // 30 seconds to mimic API gateway timeout\n      headers\n    });\n\n    // Convert AxiosError to HttpError for easier error checking in tests\n    this._axiosInstance.interceptors.response.use(\n      function (response: AxiosResponse) {\n        return response;\n      },\n      function (error: AxiosError) {\n        if (error.response) {\n          return Promise.reject(new HttpError(error.response.status, error.response.data));\n        }\n        return Promise.reject(error);\n      }\n    );\n    this.resources = getResources(this);\n  }\n\n  public async cleanup(): Promise<void> {\n    // We need to reverse the order of the queue before we execute the cleanup tasks\n    const items = _.reverse(_.slice(this._cleanupQueue));\n\n    for (const { task } of items) {\n      try {\n        await task();\n      } catch (error) {\n        console.error(error);\n      }\n    }\n\n    this._cleanupQueue = []; // This way if the cleanup() method is called again, we don't need to cleanup again\n  }\n\n  // This is used by the Resource and CollectionResource base classes. You rarely need to use this method unless you\n  // want to add your explicit cleanup task\n  // @param {object} cleanupTask an object of shape { id, command = async fn() }\n  public addCleanupTask(cleanupTask: CleanupTask): void {\n    this._cleanupQueue.push(cleanupTask);\n  }\n\n  // Given the id of the cleanup task, remove it from the cleanup queue. If there is more than one task with the same\n  // id in the queue, all of the tasks with the matching id will be removed.\n  public removeCleanupTask(id: string): CleanupTask[] {\n    return _.remove(this._cleanupQueue, ['id', id]);\n  }\n\n  public getAxiosInstance(): AxiosInstance {\n    return this._axiosInstance;\n  }\n\n  public getSettings(): Settings {\n    return this._settings;\n  }\n\n  public getSetup(): Setup {\n    return this._setup;\n  }\n}\n\ninterface CleanupTask {\n  id: string;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  task: Function;\n}\n"]}