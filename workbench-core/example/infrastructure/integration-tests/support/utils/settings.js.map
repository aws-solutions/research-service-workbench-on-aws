{"version":3,"file":"settings.js","sourceRoot":"","sources":["settings.ts"],"names":[],"mappings":";AAAA;;;GAGG;;;;;AAEH,qDAAqD;AACrD,oDAAuB;AA0BvB;;;GAGG;AACH,MAAqB,QAAQ;IAG3B,YAAmB,UAAmB;QACpC,IAAI,CAAC,QAAQ,GAAG,gBAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAC1C,CAAC;IAED,IAAW,OAAO;QAChB,OAAO,gBAAC,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACpC,CAAC;IAEM,GAAG,CAAC,GAAe,EAAE,KAAa;QACvC,gDAAgD;QAChD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;IAC7B,CAAC;IAEM,GAAG,CAAC,GAAe;QACxB,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACjC,IAAI,gBAAC,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAC,CAAC,SAAS,CAAC,KAAK,CAAC;YACzC,MAAM,IAAI,KAAK,CAAC,QAAQ,GAAG,qEAAqE,CAAC,CAAC;QAEpG,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,QAAQ,CAAC,GAAe,EAAE,YAAqB;QACpD,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;QACjC,IAAI,gBAAC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,gBAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAAE,OAAO,YAAY,CAAC;QAEnF,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AA9BD,2BA8BC;AAED,MAAM,CAAC,OAAO,GAAG,QAAQ,CAAC","sourcesContent":["/*\n *  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *  SPDX-License-Identifier: Apache-2.0\n */\n\n/* eslint-disable security/detect-object-injection */\nimport _ from 'lodash';\n\ninterface Setting {\n  runId: string;\n  rootUserNameParamStorePath: string;\n  rootPasswordParamStorePath: string;\n\n  // Main CFN template outputs\n  ExampleS3BucketExampleS3BucketDatasetsArnOutput393A6D8B: string,\n  AwsRegion: string,\n  ExampleCognitoUserPoolClientId: string,\n  ExampleEncryptionKeyEncryptionKeyOutput172B0370: string,\n  ExampleS3BucketAccessLogsNameOutput: string,\n  ExampleRestApiEndpoint9C6D55BB: string,\n  ExampleAPIEndpoint: string,\n  ExampleCognitoDomainName: string,\n  ExampleDynamoDBTableOutput: string,\n  ExampleCognitoUserPoolId: string,\n  ExampleLambdaRoleOutput: string\n\n  // Configs for AWS Account onboard te\n  // Derived\n  mainAccountId: string;\n}\n\nexport type SettingKey = keyof Setting;\n/**\n * All settings used during the tests are stored here. The main advantage of having to use get/set methods\n * when accessing settings values is so that we can print an informative message when keys are missing.\n */\nexport default class Settings {\n  private _content: Setting;\n\n  public constructor(yamlObject: Setting) {\n    this._content = _.cloneDeep(yamlObject);\n  }\n\n  public get entries(): Setting {\n    return _.cloneDeep(this._content);\n  }\n\n  public set(key: SettingKey, value: string): void {\n    // TODO: Prevent updating main CFN output values\n    this._content[key] = value;\n  }\n\n  public get(key: SettingKey): string {\n    const value = this._content[key];\n    if (_.isEmpty(value) && !_.isBoolean(value))\n      throw new Error(`The \"${key}\" setting value is required but it is either empty or not a boolean`);\n\n    return value;\n  }\n\n  public optional(key: SettingKey, defaultValue?: string): string | undefined {\n    const value = this._content[key];\n    if (_.isNil(value) || (_.isString(value) && _.isEmpty(value))) return defaultValue;\n\n    return value;\n  }\n}\n\nmodule.exports = Settings;\n"]}