{"version":3,"file":"datasetHelper.js","sourceRoot":"","sources":["datasetHelper.ts"],"names":[],"mappings":";;;;;;AAEA,oDAAuB;AACvB,qDAA6B;AAE7B,MAAa,aAAa;IAExB;QACE,MAAM,KAAK,GAAG,IAAI,eAAK,EAAE,CAAC;QAC1B,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC,gBAAgB,EAAE,CAAC;IAC1C,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,MAAc,EAAE,SAAiB;QAC7D,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,gBAAgB,CAAC;YACrE,SAAS,EAAE,SAAS;YACpB,MAAM,EAAE,MAAM;SACf,CAAE,CAAC;QACJ,OAAO,QAAQ,CAAC,eAAgB,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,iBAAiB,CAAC,MAAc,EAAE,GAAW;QACxD,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,aAAa,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,CAAE,CAAC;QACpG,IAAI,aAAa,CAAC,QAAS,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO;QAEjD,8DAA8D;QAC9D,MAAM,YAAY,GAAiD;YACjE,MAAM,EAAE,MAAM;YACd,MAAM,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE;SACxB,CAAC;QACF,aAAa,CAAC,QAAS,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACtC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;QAC1D,IAAI,aAAa,CAAC,WAAW;YAAE,MAAM,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IAC3E,CAAC;IAEM,KAAK,CAAC,gBAAgB,CAAC,SAAiB;QAC7C,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG;aAC3B,MAAM,CAAC,EAAE,EAAE,EAAE,WAAW,SAAS,EAAE,EAAE,EAAE,EAAE,WAAW,SAAS,EAAE,EAAE,CAAC;aAClE,OAAO,EAAE,CAAC;QACb,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG;aACxC,KAAK,CAAC;YACL,GAAG,EAAE;gBACH,IAAI,EAAE,IAAI;gBACV,KAAK,EAAE,WAAW,SAAS,EAAE;aAC9B;SACF,CAAC;aACD,OAAO,EAAE,CAAC;QACb,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC;YAAE,OAAO;QAE7B,MAAM,SAAS,GAAG,IAAI,CAAC,KAAM,CAAC;QAC9B,iIAAiI;QACjI,MAAM,OAAO,CAAC,GAAG,CACf,gBAAC,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE;YAClC,MAAM,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;QACxF,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;CACF;AAtDD,sCAsDC","sourcesContent":["import { AccessPoint } from '@aws-sdk/client-s3-control';\nimport { AwsService } from '@aws/workbench-core-base';\nimport _ from 'lodash';\nimport Setup from '../setup';\n\nexport class DatasetHelper {\n  private _awsSdk: AwsService;\n  public constructor() {\n    const setup = new Setup();\n    this._awsSdk = setup.getMainAwsClient();\n  }\n\n  public async listAccessPoints(bucket: string, accountId: string): Promise<Array<AccessPoint>> {\n    const response = await this._awsSdk.clients.s3Control.listAccessPoints({\n      AccountId: accountId,\n      Bucket: bucket\n    })!;\n    return response.AccessPointList!;\n  }\n\n  public async deleteS3Resources(bucket: string, dir: string): Promise<void> {\n    const listedObjects = await this._awsSdk.clients.s3.listObjectsV2({ Bucket: bucket, Prefix: dir })!;\n    if (listedObjects.Contents!.length === 0) return;\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const deleteParams: { Bucket: string; Delete: { Objects: any } } = {\n      Bucket: bucket,\n      Delete: { Objects: [] }\n    };\n    listedObjects.Contents!.forEach((key) => {\n      deleteParams.Delete.Objects.push({ Key: key.Key });\n    });\n\n    await this._awsSdk.clients.s3.deleteObjects(deleteParams);\n    if (listedObjects.IsTruncated) await this.deleteS3Resources(bucket, dir);\n  }\n\n  public async deleteDdbRecords(dataSetId: string): Promise<void> {\n    await this._awsSdk.helpers.ddb\n      .delete({ pk: `DATASET#${dataSetId}`, sk: `DATASET#${dataSetId}` })\n      .execute();\n    const data = await this._awsSdk.helpers.ddb\n      .query({\n        key: {\n          name: 'pk',\n          value: `DATASET#${dataSetId}`\n        }\n      })\n      .execute();\n    if (data.Count === 0) return;\n\n    const endpoints = data.Items!;\n    // Tests are not expected to create more than a couple of endpoints per DS max, so no support needed for pagintated query results\n    await Promise.all(\n      _.map(endpoints, async (endpoint) => {\n        await this._awsSdk.helpers.ddb.delete({ pk: endpoint.pk, sk: endpoint.sk }).execute();\n      })\n    );\n  }\n}\n"]}